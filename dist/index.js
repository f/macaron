// Generated by CoffeeScript 1.7.1
(function() {
  var Macaron, coffee, fs;

  fs = require('fs');

  coffee = require('coffee-script');

  module.exports = Macaron = (function() {
    Macaron.prototype.hygienicVariableTemplate = function(name, id) {
      return "_" + name + "$" + id;
    };

    function Macaron(options) {
      this.options = options;
    }

    Macaron.prototype.compileSource = function(macroSource, mainSource, options) {
      this.macros = this.parseMacros(macroSource);
      this.mainNodes = this.getNodes(mainSource);
      return this.compile(options);
    };

    Macaron.prototype.compileFile = function(macroFile, mainFile, options) {
      this.macros = this.parseMacros(this.getSource(macroFile));
      this.mainNodes = this.getNodes(this.getSource(mainFile));
      return this.compile(options);
    };

    Macaron.prototype.compileFileAndRun = function() {
      return eval(this.compileFile.apply(this, arguments));
    };

    Macaron.prototype.compileSourceAndRun = function() {
      return eval(this.compileFile.apply(this, arguments));
    };

    Macaron.prototype.compile = function(options) {
      if (options == null) {
        options = this.options;
      }
      this.walkAndReplace(this.mainNodes, this.macroize.bind(this));
      return this.mainNodes.compile(options);
    };

    Macaron.prototype.parseMacros = function(source) {
      var macros, nodes;
      macros = {};
      nodes = this.getNodes(source);
      nodes.expressions.forEach((function(_this) {
        return function(node) {
          var name, _ref, _ref1, _ref2;
          if (node.variable.base.value === 'macro') {
            name = (_ref = node.variable.properties) != null ? (_ref1 = _ref[0]) != null ? (_ref2 = _ref1.name) != null ? _ref2.value.toString() : void 0 : void 0 : void 0;
            return macros[name] = node.value;
          }
        };
      })(this));
      return macros;
    };

    Macaron.prototype.walkAndReplace = function(node, replacer) {
      var _ref;
      return (_ref = node.children) != null ? _ref.forEach((function(_this) {
        return function(childName) {
          var child, grantChild, i, _i, _len, _results;
          child = node[childName];
          if (!child) {
            return;
          }
          if (child.length != null) {
            _results = [];
            for (i = _i = 0, _len = child.length; _i < _len; i = ++_i) {
              grantChild = child[i];
              replacer(grantChild, function(replacement) {
                return child[i] = replacement;
              });
              _results.push(_this.walkAndReplace(child[i], replacer));
            }
            return _results;
          } else {
            replacer(child, function(replacement) {
              return child = node[childName] = replacement;
            });
            return _this.walkAndReplace(child, replacer);
          }
        };
      })(this)) : void 0;
    };

    Macaron.prototype.macroize = function(node, replace) {
      var args, i, macro, name, param, vars, _i, _len, _ref, _ref1, _ref2;
      if (node.constructor.name !== 'Call') {
        return;
      }
      name = (_ref = node.variable) != null ? (_ref1 = _ref.base) != null ? _ref1.value : void 0 : void 0;
      if (!this.macroExists(name)) {
        return;
      }
      macro = Object.create(this.macros[name]);
      args = {};
      vars = {};
      _ref2 = macro.params;
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        param = _ref2[i];
        name = param.name.value;
        if (param.splat) {
          args[name] = node.args[i].body;
        } else {
          args[name] = node.args[i];
        }
      }
      this.walkAndReplace(macro, (function(_this) {
        return function(node, replace) {
          var ref, _ref3;
          if (node.constructor.name !== 'Value') {
            return;
          }
          ref = (_ref3 = node.base) != null ? _ref3.value : void 0;
          if (args[ref]) {
            return replace(args[ref]);
          } else if ((ref != null ? ref.indexOf('$') : void 0) === 0) {
            name = ref.substring(1);
            name = vars[name] || (vars[name] = _this.generateHygienicName(name));
            return node.base.value = name;
          }
        };
      })(this));
      return replace(macro.body);
    };

    Macaron.prototype.getSource = function(file) {
      return fs.readFileSync(file).toString();
    };

    Macaron.prototype.getNodes = function(source) {
      return coffee.nodes(coffee.tokens(source));
    };

    Macaron.prototype.macroExists = function(name) {
      return (name != null) && (this.macros[name] != null);
    };

    Macaron.prototype.generateHygienicName = function(name) {
      if (this.hygieneId == null) {
        this.hygieneId = 0;
      }
      this.hygieneId++;
      return this.hygienicVariableTemplate(name, this.hygieneId);
    };

    return Macaron;

  })();

  if (window) {
    window.Macaron = Macaron;
  }

}).call(this);
