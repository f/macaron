{"name":"Macaron","tagline":"Macros for CoffeeScript","body":"# Macaron\r\n\r\nMacros for CoffeeScript.\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install macaron\r\n```\r\n\r\n## Overview\r\n\r\nCreate a Macro library:\r\n```coffeescript\r\n# macros.coffee\r\nmacro.swap = (x, y)->\r\n  $tmp = y\r\n  y = x\r\n  x = $tmp\r\n```\r\n\r\nWrite your Coffee using macros like functions:\r\n```coffeescript\r\n# main.coffee\r\nx = 1\r\ny = 2\r\nconsole.log \"before: x is #{x}, y is #{y}\"\r\nswap x, y\r\nconsole.log \"after: x is #{x}, y is #{y}\"\r\n```\r\n\r\nCompile them on Terminal ..:\r\n```bash\r\n$ macaron macros.coffee main.coffee\r\nbefore: x is 1, y is 2\r\nafter: x is 2, y is 1\r\n```\r\n\r\n.. Or in your CoffeeScript Code:\r\n```coffeescript\r\n# mycoffee.coffee\r\nMacaron = require 'macaron'\r\nmacros = new Macaron\r\ncompiledJS = macros.compileFile 'macros.coffee', 'main.coffee', bare: no\r\n\r\nconsole.log compiledJS\r\n```\r\n\r\n```bash\r\ncoffee mycoffee.coffee\r\n```\r\n\r\n## Usage\r\n\r\n```bash\r\nmacaron [MACROS FILE] [SOURCE FILES...] [COFFEE OPTIONS]\r\n```\r\n\r\n### Basic Compilation\r\n\r\nIt basically replaces the code with the macro code.\r\n\r\n```javascript\r\n// $ macaron examples/macros.coffee examples/source.coffee\r\nvar x, y, _tmp$1;\r\nx = 1;\r\ny = 2;\r\nconsole.log(\"before swap, x is \" + x + \", y is \" + y);\r\n\r\n// swap x, y macro starts here\r\n_tmp$1 = y;\r\ny = x;\r\nx = _tmp$1;\r\n// ends here\r\n\r\nconsole.log(\"after swap, x is \" + x + \", y is \" + y);\r\n```\r\n\r\n### Using Code Blocks\r\n\r\nYou can also use code blocks to use efficiently. To do this, just use splats\r\nof CoffeeScript (`...`)\r\n\r\n```coffeescript\r\n# Create a macro named do_something which accepts a code block\r\nmacro.do_something = (block...)->\r\n  hello = \"world\"\r\n  do ->\r\n    block\r\n```\r\n\r\nThen you can simply call like a callback\r\n\r\n```coffeescript\r\n# Call the macro with a code block\r\ndo_something ->\r\n  console.log hello\r\n```\r\n\r\nIt will generate that code:\r\n\r\n```javascript\r\nvar hello;\r\n\r\nhello = \"world\";\r\n(function() {\r\n  return console.log(hello);\r\n})();\r\n```\r\n\r\n### Composing\r\n\r\nYou can compose macros.\r\n\r\n```coffeescript\r\nmacro.sayHello = (world)->\r\n  hello = \"world\"\r\n  world = \"hello\"\r\n  swap hello, world # Calling Scope Macro\r\n  console.log hello, world\r\n```\r\n\r\n### Hygiene\r\n\r\nYou can keep your variables safe using `$` prefix on your variables.\r\n\r\n```coffeescript\r\n# macros.coffee\r\nmacro.swap = (x, y)->\r\n  $tmp = y\r\n  y = x\r\n  x = $tmp\r\n```\r\n\r\n```coffeescript\r\n# main.coffee\r\nx = 2\r\ny = 3\r\nswap x, y\r\nconsole.log $tmp\r\n```\r\n\r\nWhen you run it, it will generate an error:\r\n```\r\nReferenceError: $tmp is not defined\r\n```\r\n\r\n## TODO\r\n\r\n  - Create Grunt Plugin\r\n  - Browserify Transform\r\n  - Do something for WebPack\r\n\r\n## License\r\n\r\nMIT: [f.mit-license.org][3]\r\n\r\n### The Idea\r\n\r\n> A fork of [davidpadbury/stirred-coffee][1], based on the [blog post][2] about it.\r\n\r\n[1]: http://github.com/davidpadbury/stirred-coffee\r\n[2]: http://blog.davidpadbury.com/2010/12/09/making-macros-in-coffeescript/\r\n[3]: http://f.mit-license.org\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}